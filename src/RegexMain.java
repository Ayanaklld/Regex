public class RegexMain {
    public static void main(String[] args) {
        // Регулярные выражения - шаблон написанный на специальном языке
        // используемый для проверки строки на соответствие либо поиска
        // совпадений. Регулярные выражения состоят из правил и количественных
        // модификаторов.

        // Правила - символы либо группа символов имеющих в контексте
        // регулярного выражения определённое назначение.

        // 1) Любой символ в регулярном выражении представляет сам себя если
        // это не символ со специальным назначением.
        // `hello` -> `hello` (+); `hello world` (+); `liquid` (-); `hell` (-);

        // 2) `^` - начало строки.
        // `^hello` - `hello world` (+); `world hello` (-);

        // 3) `$` - конец строки.
        // `hello$` - `world hello` (+); `hello world` (-);
        // `^hello$` - `hello` (+); `hello world hello` (-);

        // 4) `.` - любой символ.
        // `^a.c$` -> `abc` (+); `azc` (+); `a_c` (+); `a#c` (+); `zbc` (-);

        // 5) `\s` - пробел.
        // `^a\sc$` - `a c` (+); `a_c` (-); `z c` (-);

        // 6) `\d` - цифра от 0 до 9.
        // `^a\dc$` - `a2c` (+); `a7c` (+); `a5f` (-); `a_c` (-);

        // 7) `\w` - буква латинского алфавита, цифра от 0 до 9 либо символ
        // нижнего подчеркивания.
        // `^a\wc$` -> `abc` (+); `aBc` (+); `a_c` (+); `a7c` (+); `a#c` (-);

        // 8) `[]` - группа символов из которой совпасть может любой.
        // `^a[zxb]c$` -> `azc` (+); `axc` (+); `abc` (+); `afc` (-);
        // `[a-z]` - любая латинская буква в нижнем регистре.
        // `[A-Z]` - любая латинская буква в верхнем регистре.
        // `[a-zA-Z]` - любая латинская буква в любом регистре.
        // `[а-яёА-ЯЁ]` - любая кириллическая буква в любом регистре.
        // `[3-7]` - любая цифра от 3 до 7 включительно.
        // `[a-z3-7#_.]` - любая латинская буква в нижнем регистре или цифра от
        // 3 до 7 включительно или решётка, нижнее подчёркивание либо точка.

        // 9) `()` - группировка несколько правил в одно и формирование группы
        // для поиска и замены совпадений.

        // `.` (любой символ).
        // `\.` (точка).

        // `+` (количественный модификатор).
        // `\+` (плюс).

        // Количественные модификаторы - специальная конструкция позволяющая
        // определить количество раз для применения правила. Любое правило по
        // умолчанию применяется один раз. Количественный модификатор
        // применяется непосредственно к тому правилу после которого записан.

        // `<правило 1><правило 2><количественный модификатор>` - в данном
        // случае количественный модификатор применяется ко второму правилу, а
        // первое правило применится только один раз.

        // 1) `?` - 0 или 1 раз.
        // `^c\d?$` - `c` (+); `c7` (+); `c777` (-); `c77777` (-); `c7777777` (-);

        // 2) `*` - от 0 и более раз.
        // `^c\d*$` - `c` (+); `c7` (+); `c777` (+); `c77777` (+); `c7777777` (+);

        // 3) `+` - от 1 и более раз.
        // `^c\d+$` - `c` (-); `c7` (+); `c777` (+); `c77777` (+); `c7777777` (+);

        // 4) `{n}` - n раз.
        // `^c\d{3}$` - `c` (-); `c7` (-); `c777` (+); `c77777` (-); `c7777777` (-);

        // 5) `{n,}` - от n и более раз.
        // `^c\d{3,}$` - `c` (-); `c7` (-); `c777` (+); `c77777` (+); `c7777777` (+);

        // 6) `{n1,n2}` - от n1 до n2 раз включительно.
        // `^c\d{3,5}$` - `c` (-); `c7` (-); `c777` (+); `c77777` (+); `c7777777` (-);

        // `*.matches(String regex) : boolean` - возвращает true если исходная
        // строка `*` соответствует регулярному выражению из параметра `regex`.

        String code = "Z789321CN";
        boolean codeMatch = code.matches("^Z\\d{6}[A-Z]{2}$");
        System.out.println(codeMatch);

        String ip = "12.9.136.55";
        boolean ipMatch = ip.matches("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
        System.out.println(ipMatch);

        String phone = "+7 (708) 411-11-98";
        boolean phoneMatch = phone.matches("^\\+7 \\((727|700|708|705|771|776|777|701|702|775|778|707|747|)\\) \\d{3}-\\d{2}-\\d{2}$");
        System.out.println(phoneMatch);

        String dateTime = "2022/12/31 55:45:01";
        boolean dateTimeMatch = dateTime.matches("^(17[0-9][0-9]|18[0-9][0-9]|19[0-9][0-9]|20[0-1][0-9]|202[0-3])/(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01]) \\d{2}:([0-5][0-9]):([0-5][0-9])$");
        System.out.println(dateTimeMatch);
    }
}
